package com.kenshoo.pl.entity;

import com.kenshoo.jooq.AbstractDataTable;
import com.kenshoo.jooq.DataTable;
import com.kenshoo.pl.entity.annotation.Id;
import org.jooq.Record;
import org.jooq.TableField;
import org.jooq.impl.SQLDataType;
import org.junit.Test;

import java.util.Optional;
import java.util.Set;

import static com.kenshoo.pl.entity.annotation.IdGeneration.Manual;
import static com.kenshoo.pl.entity.annotation.IdGeneration.RetrieveAutoGenerated;
import static java.util.stream.Collectors.toUnmodifiableSet;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertFalse;

public class AbstractEntityTypeTest {

    @Test
    public void test_getIdField_returns_id_with_RetrieveAutoGenerated_annotation() {
        assertThat(EntityWithAutoInc.INSTANCE.getIdGeneration().get(), is(RetrieveAutoGenerated));
        assertThat(EntityWithAutoInc.INSTANCE.getIdField().get(), is(EntityWithAutoInc.id));
    }

    @Test
    public void test_getIdField_returns_id_without_annotation_as_Manual() {
        assertThat(EntityWithManualId.INSTANCE.getIdGeneration().get(), is(Manual));
        assertThat(EntityWithManualId.INSTANCE.getIdField().get(), is(EntityWithManualId.id));
    }

    @Test
    public void test_getIdField_returns_nothing_when_no_id_field() {
        assertFalse(EntityWithoutId.INSTANCE.getIdField().isPresent());
        assertFalse(EntityWithoutId.INSTANCE.getIdGeneration().isPresent());
    }

    @Test
    public void test_getPrimaryIdentityField_returns_empty_when_manual() {
        assertThat(EntityWithoutId.INSTANCE.getPrimaryIdentityField().isPresent(),
                   is(false));
    }

    @Test
    public void test_getPrimaryIdentityField_returns_identity_field_when_auto_inc() {
        assertThat(EntityWithAutoInc.INSTANCE.getPrimaryIdentityField(),
                   equalTo(Optional.of(EntityWithAutoInc.id)));
    }

    @Test
    public void getTransientPropertiesWhenValidReturnsTheProperties() {
        assertThat(EntityWithValidTransients.INSTANCE.getTransientProperties().collect(toUnmodifiableSet()),
                is(Set.of(EntityWithValidTransients.TRANSIENT_STR, EntityWithValidTransients.TRANSIENT_INT)));
    }

    @Test(expected = ExceptionInInitializerError.class)
    public void getTransientPropertiesWhenDuplicatedShouldThrowException() {
        EntityWithDuplicateTransient.INSTANCE.getTransientProperties();
    }

    @Test(expected = ExceptionInInitializerError.class)
    public void getTransientPropertiesWhenNameIsBlankShouldThrowException() {
        EntityWithBlankTransientName.INSTANCE.getTransientProperties();
    }

    @Test
    public void toTransientPropertyJavaFieldNameWhenDeclaredInEntityShouldReturnCorrectName() {
        final var maybeJavaFieldName = EntityWithValidTransients.INSTANCE.toTransientPropertyJavaFieldName(EntityWithValidTransients.TRANSIENT_STR);
        assertThat(maybeJavaFieldName, is(Optional.of("TRANSIENT_STR")));
    }

    @Test
    public void toTransientPropertyJavaFieldNameWhenNotDeclaredInEntityShouldReturnEmpty() {
        final var detachedTransientProperty = new TransientEntityProperty<EntityWithValidTransients, String>() {
            public EntityType<EntityWithValidTransients> getEntityType() {
                return EntityWithValidTransients.INSTANCE;
            }
            public String getName() {
                return "bla";
            }
        };

        final var maybeJavaFieldName = EntityWithValidTransients.INSTANCE.toTransientPropertyJavaFieldName(detachedTransientProperty);
        assertThat(maybeJavaFieldName, is(Optional.empty()));
    }

    public static class AutoIncTable extends AbstractDataTable<AutoIncTable> {

        public static final AutoIncTable TABLE = new AutoIncTable();

        private AutoIncTable() {
            super("autoIncTable");
        }

        public final TableField<Record, Integer> id = createPKField("id", SQLDataType.INTEGER.identity(true));

        @Override
        public AutoIncTable as(final String alias) {
            return null;
        }
    }

    public static class ManualIdTable extends AbstractDataTable<ManualIdTable> {

        public static final ManualIdTable TABLE = new ManualIdTable();

        private ManualIdTable() {
            super("manualIdTable");
        }

        public final TableField<Record, Integer> id = createPKField("id", SQLDataType.INTEGER);

        @Override
        public ManualIdTable as(final String alias) {
            return null;
        }
    }

    public static class NoIdTable extends AbstractDataTable<NoIdTable> {

        public static final NoIdTable TABLE = new NoIdTable();

        private NoIdTable() {
            super("noIdTable");
        }

        public final TableField<Record, Integer> someInt = createField("someInt", SQLDataType.INTEGER);

        @Override
        public NoIdTable as(final String alias) {
            return null;
        }
    }

    public static class EntityWithAutoInc extends AbstractEntityType<EntityWithAutoInc> {

        static EntityWithAutoInc INSTANCE = new EntityWithAutoInc();

        private EntityWithAutoInc() {
            super("testEntityWithAutoInc");
        }

        @Id(RetrieveAutoGenerated)
        public static EntityField<EntityWithAutoInc, Integer> id = INSTANCE.field(AutoIncTable.TABLE.id);

        @Override
        public DataTable getPrimaryTable() {
            return AutoIncTable.TABLE;
        }
    }

    public static class EntityWithManualId extends AbstractEntityType<EntityWithManualId> {

        static EntityWithManualId INSTANCE = new EntityWithManualId();

        private EntityWithManualId() {
            super("testEntityWithManualId");
        }

        @Id
        public static EntityField<EntityWithManualId, Integer> id = INSTANCE.field(ManualIdTable.TABLE.id);

        @Override
        public DataTable getPrimaryTable() {
            return ManualIdTable.TABLE;
        }
    }

    public static class EntityWithoutId extends AbstractEntityType<EntityWithoutId> {
        static EntityWithoutId INSTANCE = new EntityWithoutId();

        private EntityWithoutId() {
            super("testEntityWithoutId");
        }

        public static EntityField<EntityWithoutId, Integer> someInt = INSTANCE.field(NoIdTable.TABLE.someInt);

        @Override
        public DataTable getPrimaryTable() {
            return NoIdTable.TABLE;
        }
    }

    public static class EntityWithValidTransients extends AbstractEntityType<EntityWithValidTransients> {
        static EntityWithValidTransients INSTANCE = new EntityWithValidTransients();

        private EntityWithValidTransients() {
            super("testEntityWithValidTransients");
        }

        public static TransientEntityProperty<EntityWithValidTransients, String> TRANSIENT_STR = INSTANCE.transientProperty("transientStr");
        public static TransientEntityProperty<EntityWithValidTransients, Integer> TRANSIENT_INT = INSTANCE.transientProperty("transientInt");

        @Override
        public DataTable getPrimaryTable() {
            return ManualIdTable.TABLE;
        }
    }

    public static class EntityWithDuplicateTransient extends AbstractEntityType<EntityWithDuplicateTransient> {
        static EntityWithDuplicateTransient INSTANCE = new EntityWithDuplicateTransient();

        private EntityWithDuplicateTransient() {
            super("testEntityWithDuplicateTransient");
        }

        public static TransientEntityProperty<EntityWithDuplicateTransient, String> TRANSIENT_STR_1 = INSTANCE.transientProperty("transientStr");
        public static TransientEntityProperty<EntityWithDuplicateTransient, String> TRANSIENT_STR_2 = INSTANCE.transientProperty("transientStr");

        @Override
        public DataTable getPrimaryTable() {
            return ManualIdTable.TABLE;
        }
    }

    public static class EntityWithBlankTransientName extends AbstractEntityType<EntityWithBlankTransientName> {
        static EntityWithBlankTransientName INSTANCE = new EntityWithBlankTransientName();

        private EntityWithBlankTransientName() {
            super("testEntityWithBlankTransientName");
        }

        public static TransientEntityProperty<EntityWithBlankTransientName, String> TRANSIENT_1 = INSTANCE.transientProperty("   ");

        @Override
        public DataTable getPrimaryTable() {
            return ManualIdTable.TABLE;
        }
    }
}
